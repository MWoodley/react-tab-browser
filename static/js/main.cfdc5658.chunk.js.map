{"version":3,"sources":["AddRowForm.js","App.js","serviceWorker.js","index.js"],"names":["AddRowForm","props","initialData","track","artist","album","part","tuning","notes","initialErrors","useState","formData","setFormData","errors","setErrors","onFieldUpdate","e","preventDefault","target","name","value","toUpperCase","onSubmit","newErrors","hasErrors","console","log","length","handleModalClose","Modal","Header","closeButton","Title","Body","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","type","autoCapitalize","autoComplete","placeholder","onChange","isInvalid","Feedback","rows","Footer","Button","variant","onClick","App","rowData","setRowData","modalShown","setModalShown","useEffect","storedData","localStorage","getItem","JSON","parse","inputRef","React","useRef","className","style","margin","maxWidth","width","padding","height","columnDefs","headerName","field","paginationAutoPageSize","pagination","defaultColDef","sortable","filter","headerComponentParams","menuIcon","fileData","stringify","blob","Blob","url","URL","createObjectURL","link","document","createElement","download","href","click","htmlFor","current","ref","accept","file","files","reader","FileReader","onload","jsonString","result","json","setItem","error","readAsText","id","tabIndex","position","top","left","show","onHide","size","data","newData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cfdc5658.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Form, Row, Col, Button, Modal } from \"react-bootstrap\";\n\nfunction AddRowForm(props) {\n  const initialData = {\n    track: \"\",\n    artist: \"\",\n    album: \"\",\n    part: \"\",\n    tuning: \"\",\n    notes: \"\",\n  };\n\n  const initialErrors = {\n    track: false,\n    artist: false,\n    tuning: false,\n  };\n\n  const [formData, setFormData] = useState(initialData);\n  const [errors, setErrors] = useState(initialErrors);\n\n  const onFieldUpdate = (e) => {\n    e.preventDefault();\n    setFormData({\n      ...formData,\n      [e.target.name]:\n        e.target.name === \"tuning\"\n          ? e.target.value.toUpperCase()\n          : e.target.value,\n    });\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    var newErrors = {};\n    var hasErrors = false;\n    console.log(formData);\n    if (formData.track.length === 0) {\n      newErrors.track = \"Track name is required\";\n      hasErrors = true;\n    }\n    if (formData.artist.length === 0) {\n      newErrors.artist = \"Artist name is required\";\n      hasErrors = true;\n    }\n    if (formData.tuning.length === 0) {\n      newErrors.tuning = \"A tuning is required\";\n      hasErrors = true;\n    }\n    if (hasErrors) {\n      setErrors(newErrors);\n      return;\n    }\n    setErrors(initialErrors);\n    props.onSubmit(formData);\n    props.handleModalClose();\n    setFormData(initialData);\n  };\n\n  const clearForm = (e) => {\n    e.preventDefault();\n    props.handleModalClose();\n    setFormData(initialData);\n  };\n\n  return (\n    <div>\n      <Modal.Header closeButton>\n        <Modal.Title>Add Track</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={onSubmit}>\n          <Form.Group as={Row} controlId=\"addRowForm.track\">\n            <Form.Label column sm={2}>\n              Track\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Control\n                type=\"text\"\n                name=\"track\"\n                autoCapitalize=\"true\"\n                autoComplete=\"false\"\n                placeholder=\"Crocodile\"\n                value={formData.track}\n                onChange={onFieldUpdate}\n                isInvalid={errors.track !== false}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.track}\n              </Form.Control.Feedback>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"addRowForm.artist\">\n            <Form.Label column sm={2}>\n              Artist\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Control\n                type=\"text\"\n                name=\"artist\"\n                autoCapitalize=\"true\"\n                autoComplete=\"false\"\n                placeholder=\"TTNG\"\n                value={formData.artist}\n                onChange={onFieldUpdate}\n                isInvalid={errors.artist !== false}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.artist}\n              </Form.Control.Feedback>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"addRowForm.album\">\n            <Form.Label column sm={2}>\n              Album\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Control\n                type=\"text\"\n                name=\"album\"\n                autoCapitalize=\"true\"\n                autoComplete=\"false\"\n                placeholder=\"Animals\"\n                value={formData.album}\n                onChange={onFieldUpdate}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"addRowForm.part\">\n            <Form.Label column sm={2}>\n              Part Label\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Control\n                type=\"text\"\n                name=\"part\"\n                autoCapitalize=\"true\"\n                autoComplete=\"false\"\n                placeholder=\"Lead Guitar\"\n                value={formData.part}\n                onChange={onFieldUpdate}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"addRowForm.tuning\">\n            <Form.Label column sm={2}>\n              Tuning\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Control\n                type=\"text\"\n                name=\"tuning\"\n                autoComplete=\"false\"\n                placeholder=\"EADGBE\"\n                value={formData.tuning}\n                onChange={onFieldUpdate}\n                isInvalid={errors.tuning !== false}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.tuning}\n              </Form.Control.Feedback>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"addRowForm.notes\">\n            <Form.Label column sm={2}>\n              Notes\n            </Form.Label>\n            <Col sm={10}>\n              <Form.Control\n                as=\"textarea\"\n                rows=\"4\"\n                name=\"notes\"\n                autoComplete=\"false\"\n                placeholder=\"Capo on fret 3\"\n                value={formData.notes}\n                onChange={onFieldUpdate}\n              />\n            </Col>\n          </Form.Group>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={clearForm}>\n          Close\n        </Button>\n        <Button variant=\"primary\" onClick={onSubmit}>\n          Save Track\n        </Button>\n      </Modal.Footer>\n    </div>\n  );\n}\n\nexport default AddRowForm;\n","import React, { useState, useEffect } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport AddRowForm from \"./AddRowForm\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-material.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nfunction App() {\n  const columnDefs = [\n    { headerName: \"Track\", field: \"track\" },\n    { headerName: \"Artist\", field: \"artist\" },\n    { headerName: \"Album\", field: \"album\" },\n    { headerName: \"Part Label\", field: \"part\" },\n    { headerName: \"Tuning\", field: \"tuning\" },\n    { headerName: \"Notes\", field: \"notes\" },\n  ];\n\n  const [rowData, setRowData] = useState(null);\n  const [modalShown, setModalShown] = useState(false);\n\n  const handleModalClose = () => setModalShown(false);\n  const handleModalOpen = () => setModalShown(true);\n\n  useEffect(() => {\n    var storedData = localStorage.getItem(\"tableData\");\n    if (storedData) {\n      setRowData(JSON.parse(storedData));\n    } else {\n      setRowData([]);\n    }\n  }, []);\n\n  const addRow = (data) => {\n    let newData;\n    if (rowData === null) {\n      newData = [data];\n    } else {\n      newData = [...rowData, data];\n    }\n    setRowData(newData);\n    localStorage.setItem(\"tableData\", JSON.stringify(newData));\n  };\n\n  const inputRef = React.useRef();\n\n  const saveData = () => {\n    const fileData = JSON.stringify(rowData);\n    const blob = new Blob([fileData], { type: \"text/plain\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.download = \"tunings.json\";\n    link.href = url;\n    link.click();\n  };\n\n  const handleDataUpload = (e) => {\n    const [file] = e.target.files;\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        var jsonString = e.target.result;\n        try {\n          var json = JSON.parse(jsonString);\n          setRowData(json);\n          localStorage.setItem(\"tableData\", jsonString);\n        } catch (error) {}\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div\n        style={{\n          margin: \"0 auto\",\n          maxWidth: \"1024px\",\n          width: \"100%\",\n          padding: \"0 20px\",\n        }}\n      >\n        <h2>Guitar Tuning Browser</h2>\n        <hr />\n        <div\n          className=\"ag-theme-balham\"\n          style={{\n            height: \"512px\",\n            width: \"100%\",\n          }}\n        >\n          <AgGridReact\n            columnDefs={columnDefs}\n            rowData={rowData}\n            paginationAutoPageSize={true}\n            pagination={true}\n            defaultColDef={{\n              sortable: true,\n              filter: true,\n              headerComponentParams: {\n                menuIcon: \"fa-bars\",\n              },\n            }}\n          ></AgGridReact>\n        </div>\n        <div className=\"py-3\">\n          <Button onClick={handleModalOpen}>Add Track +</Button>{\" \"}\n          <Button onClick={saveData}>Download Tunings</Button>{\" \"}\n          <label htmlFor=\"jsonUpload\">\n            <Button onClick={() => inputRef.current.click()}>\n              Upload Tunings\n            </Button>\n            <input\n              ref={inputRef}\n              type=\"file\"\n              accept=\"application/JSON\"\n              onChange={handleDataUpload}\n              id=\"jsonUpload\"\n              name=\"jsonUpload\"\n              tabIndex=\"-1\"\n              style={{\n                position: \"absolute\",\n                height: \"1px\",\n                width: \"1px\",\n                top: \"-0999px\",\n                left: \"-9999px\",\n              }}\n            />\n          </label>\n        </div>\n      </div>\n      <Modal show={modalShown} onHide={handleModalClose} size=\"xl\">\n        <AddRowForm onSubmit={addRow} handleModalClose={handleModalClose} />\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}